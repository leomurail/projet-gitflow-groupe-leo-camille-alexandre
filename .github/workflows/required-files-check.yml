name: üîç Check required files & changelog

on:
  pull_request:
  push:
    branches: [main, develop]

jobs:
  check-required-files:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Verify presence of essential files
        shell: bash
        run: |
          echo "üîé V√©rification des fichiers essentiels..."
          missing=0

          for f in README.md CHANGELOG.md LICENSE CONTRIBUTING.md; do
            if [[ ! -f "$f" ]]; then
              echo "::error file=$f,line=1,col=1::‚ùå Le fichier requis '$f' est manquant √† la racine du d√©p√¥t."
              missing=1
            else
              echo "‚úÖ $f pr√©sent"
            fi
          done

          if [[ $missing -eq 1 ]]; then
            echo "::error::üö´ V√©rification √©chou√©e ‚Äî un ou plusieurs fichiers obligatoires sont absents."
            exit 1
          else
            echo "üéâ Tous les fichiers requis sont pr√©sents."
          fi

  changelog-consistency:
    name: Validate CHANGELOG vs latest tag
    runs-on: ubuntu-latest
    needs: [check-required-files]   # lance cette v√©rif apr√®s la pr√©c√©dente
    steps:
      - name: Checkout with full history (for tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # n√©cessaire pour r√©cup√©rer tous les tags

      - name: Ensure CHANGELOG.md exists
        shell: bash
        run: |
          if [[ ! -f CHANGELOG.md ]]; then
            echo "::error file=CHANGELOG.md::‚ùå CHANGELOG.md est introuvable. Ajoutez ce fichier avant de continuer."
            exit 1
          fi
          echo "‚úÖ CHANGELOG.md trouv√©."

      - name: Find latest semver tag (vMAJOR.MINOR.PATCH)
        id: latest
        shell: bash
        run: |
          # R√©cup√®re et trie les tags s√©mantiques 'vX.Y.Z' par ordre d√©croissant
          git fetch --tags --force --prune >/dev/null 2>&1 || true

          latest_tag="$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n1)"

          if [[ -z "$latest_tag" ]]; then
            echo "::error::‚ùå Aucun tag au format 'vMAJOR.MINOR.PATCH' trouv√© (ex: v1.2.3)."
            echo "   ‚ûú Cr√©ez un tag s√©mantique :"
            echo "      git tag v1.0.0 && git push origin v1.0.0"
            exit 1
          fi

          echo "üîñ Dernier tag d√©tect√© : $latest_tag"
          echo "tag=$latest_tag" >> "$GITHUB_OUTPUT"

      - name: Check if latest tag is referenced in CHANGELOG.md
        shell: bash
        run: |
          tag="${{ steps.latest.outputs.tag }}"

          # √âchappe les points pour la regex
          esc_tag="$(printf '%s\n' "$tag" | sed 's/\./\\./g')"

          echo "üîé Recherche de la version '$tag' dans CHANGELOG.md ..."
          echo "   (On accepte : '## vX.Y.Z', 'vX.Y.Z' ou un lien de section contenant la version)"

          if grep -Ei -q \
            "^(##+[^0-9]*${esc_tag}\b)|(^- .*${esc_tag}\b)|([^0-9A-Za-z]${esc_tag}([^0-9.]|$))" \
            CHANGELOG.md; then
            echo "‚úÖ Coh√©rence OK : la version '$tag' est r√©f√©renc√©e dans CHANGELOG.md."
            exit 0
          else
            echo "::error file=CHANGELOG.md::‚ùå Incoh√©rence : la derni√®re version tagu√©e '$tag' n'est pas r√©f√©renc√©e dans CHANGELOG.md."
            echo ""
            echo "üí° Attendu : une section explicite pour '$tag', par exemple :"
            echo "   ## $tag"
            echo "   - Ajout : ..."
            echo "   - Correctif : ..."
            echo ""
            echo "Cas couverts :"
            echo " - Tag pr√©sent mais absent du changelog ‚Üí √©chec"
            echo " - Changelog pr√©sent mais sans section correspondant au dernier tag ‚Üí √©chec"
            echo " - Changelog et tag align√©s ‚Üí r√©ussite ‚úÖ"
            exit 1
          fi
