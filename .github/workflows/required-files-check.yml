name: üîç Check required files & changelog

on:
  pull_request:
  push:
    branches: [main, develop]
    tags:
      - 'v*'       # ex: v1.0.2
      - '[0-9]*'   # ex: 1.0.2

jobs:
  check-required-files:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Verify presence of essential files
        shell: bash
        run: |
          missing=0
          for f in README.md CHANGELOG.md LICENSE CONTRIBUTING.md; do
            if [[ ! -f "$f" ]]; then
              echo "::error file=$f::‚ùå Fichier requis manquant"
              missing=1
            else
              echo "‚úÖ $f pr√©sent"
            fi
          done
          if [[ $missing -ne 0 ]]; then
            echo "::error::üö´ V√©rification √©chou√©e ‚Äî un ou plusieurs fichiers obligatoires sont absents."
            exit 1
          fi
          echo "üéâ Tous les fichiers requis sont pr√©sents."

  changelog-consistency:
    name: Validate CHANGELOG vs latest tag (strict top section)
    runs-on: ubuntu-latest
    needs: [check-required-files]
    steps:
      - name: Checkout with full history & tags
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Ensure CHANGELOG.md exists
        shell: bash
        run: |
          if [[ ! -f CHANGELOG.md ]]; then
            echo "::error file=CHANGELOG.md::‚ùå CHANGELOG.md introuvable."
            exit 1
          fi
          echo "‚úÖ CHANGELOG.md trouv√©."

      - name: Determine latest semver tag
        id: latest
        shell: bash
        run: |
          set -euo pipefail

          # Si l'√©v√©nement courant est un push de tag, on utilise ce tag.
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            latest_tag="${{ github.ref_name }}"
          else
            # Sinon, r√©cup√©rer le plus r√©cent tag semver (avec/sans 'v')
            git fetch --tags --force --prune >/dev/null 2>&1 || true
            latest_tag="$(git for-each-ref refs/tags \
              --sort=-v:refname \
              --format='%(refname:short)' \
              'refs/tags/v[0-9]*.[0-9]*.[0-9]*' 'refs/tags/[0-9]*.[0-9]*.[0-9]*' \
              | head -n1 || true)"
          fi

          if [[ -z "${latest_tag:-}" ]]; then
            echo "::error::‚ùå Aucun tag semver trouv√© (ex: v1.0.1 ou 1.0.1)."
            echo "üí° Exemple: git tag v1.0.0 && git push origin v1.0.0"
            exit 1
          fi

          echo "üîñ Dernier tag d√©tect√© : $latest_tag"
          echo "tag=$latest_tag" >> "$GITHUB_OUTPUT"

      - name: Strict check: top CHANGELOG section must match latest tag
        shell: bash
        run: |
          set -euo pipefail

          tag="${{ steps.latest.outputs.tag }}"   # ex: v1.0.2 ou 1.0.2
          tag_nov="${tag#v}"                     # ex: 1.0.2

          # R√©cup√®re la premi√®re section de version dans CHANGELOG.md,
          # en autorisant une √©ventuelle section "Unreleased" tout en t√™te.
          # Formats accept√©s pour une section de version :
          #   ## [1.2.3] - yyyy-mm-dd
          #   ## [v1.2.3] - ...
          #   ## 1.2.3
          #   ## v1.2.3
          first_relevant_line=""
          while IFS= read -r line; do
            # Saute la toute premi√®re section "Unreleased" s'il y en a une
            if [[ -z "$first_relevant_line" ]]; then
              if echo "$line" | grep -Eiq '^##[[:space:]]+\[?Unreleased\]?' ; then
                # on ignore cette ligne et on continue √† lire
                continue
              fi
              # Cherche une section de version
              if echo "$line" | grep -Eiq '^##[[:space:]]+\[?v?[0-9]+\.[0-9]+\.[0-9]+\]?' ; then
                first_relevant_line="$line"
                break
              fi
            fi
          done < CHANGELOG.md

          if [[ -z "$first_relevant_line" ]]; then
            echo "::error file=CHANGELOG.md::‚ùå Aucune section de version (## x.y.z) trouv√©e en t√™te de CHANGELOG."
            echo "üí° Ajoute par ex. :"
            echo "   ## [${tag_nov}] - 2025-10-08"
            exit 1
          fi

          # Extrait la version de la premi√®re section trouv√©e (en retirant '##', crochets et 'v')
          first_version="$(echo "$first_relevant_line" \
            | sed -E 's/^##[[:space:]]+\[?v?([0-9]+\.[0-9]+\.[0-9]+)\]?.*$/\1/i')"

          echo "üîñ Dernier tag      : ${tag} (sans 'v' = ${tag_nov})"
          echo "üßæ Premi√®re section : ${first_relevant_line}"
          echo "   ‚Üí version extraite = ${first_version}"

          if [[ "$first_version" != "$tag_nov" ]]; then
            echo "::error file=CHANGELOG.md::‚ùå Incoh√©rence: la premi√®re section du CHANGELOG (${first_version}) ne correspond pas au dernier tag (${tag_nov})."
            echo "üí° Mets la version r√©cente en t√™te du fichier, ex. :"
            echo "   ## [${tag_nov}] - 2025-10-08"
            exit 1
          fi

          echo "‚úÖ Coh√©rence stricte OK : la premi√®re section correspond au dernier tag."
