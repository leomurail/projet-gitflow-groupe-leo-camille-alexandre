name: 🔍 Check required files & changelog

on:
  push:            # ⬅️ tous les push, toutes branches & tags
    branches: ['**']
    tags:     ['**']
  pull_request:    # ⬅️ toutes les PR
  workflow_dispatch: {}  # ⬅️ bouton "Run workflow" pour tester

jobs:
  check-required-files:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Verify presence of essential files
        shell: bash
        run: |
          missing=0
          for f in README.md CHANGELOG.md LICENSE CONTRIBUTING.md; do
            if [[ ! -f "$f" ]]; then
              echo "::error file=$f::❌ Fichier requis manquant"
              missing=1
            else
              echo "✅ $f présent"
            fi
          done
          if [[ $missing -ne 0 ]]; then
            echo "::error::🚫 Vérification échouée — un ou plusieurs fichiers obligatoires sont absents."
            exit 1
          fi
          echo "🎉 Tous les fichiers requis sont présents."

  changelog-consistency:
    name: Validate CHANGELOG vs latest tag (strict top section)
    runs-on: ubuntu-latest
    needs: [check-required-files]
    steps:
      - name: Checkout with full history & tags
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Ensure CHANGELOG.md exists
        shell: bash
        run: |
          if [[ ! -f CHANGELOG.md ]]; then
            echo "::error file=CHANGELOG.md::❌ CHANGELOG.md introuvable."
            exit 1
          fi
          echo "✅ CHANGELOG.md trouvé."

      - name: Determine latest semver tag
        id: latest
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            latest_tag="${{ github.ref_name }}"
          else
            git fetch --tags --force --prune >/dev/null 2>&1 || true
            latest_tag="$(git for-each-ref refs/tags \
              --sort=-v:refname \
              --format='%(refname:short)' \
              'refs/tags/v[0-9]*.[0-9]*.[0-9]*' 'refs/tags/[0-9]*.[0-9]*.[0-9]*' \
              | head -n1 || true)"
          fi
          if [[ -z "${latest_tag:-}" ]]; then
            echo "::error::❌ Aucun tag semver trouvé (ex: v1.0.1 ou 1.0.1)."
            echo "💡 Exemple: git tag v1.0.0 && git push origin v1.0.0"
            exit 1
          fi
          echo "🔖 Dernier tag détecté : $latest_tag"
          echo "tag=$latest_tag" >> "$GITHUB_OUTPUT"

      - name: Strict check: top CHANGELOG section must match latest tag
        shell: bash
        run: |
          set -euo pipefail
          tag="${{ steps.latest.outputs.tag }}"
          tag_nov="${tag#v}"

          # ignore éventuellement une section "Unreleased" en tête
          first_relevant_line=""
          while IFS= read -r line; do
            if [[ -z "$first_relevant_line" ]]; then
              if echo "$line" | grep -Eiq '^##[[:space:]]+\[?Unreleased\]?'; then
                continue
              fi
              if echo "$line" | grep -Eiq '^##[[:space:]]+\[?v?[0-9]+\.[0-9]+\.[0-9]+\]?'; then
                first_relevant_line="$line"
                break
              fi
            fi
          done < CHANGELOG.md

          if [[ -z "$first_relevant_line" ]]; then
            echo "::error file=CHANGELOG.md::❌ Aucune section de version (## x.y.z) trouvée en tête de CHANGELOG."
            echo "💡 Ajoute par ex. :"
            echo "   ## [${tag_nov}] - 2025-10-08"
            exit 1
          fi

          first_version="$(echo "$first_relevant_line" \
            | sed -E 's/^##[[:space:]]+\[?v?([0-9]+\.[0-9]+\.[0-9]+)\]?.*$/\1/i')"

          echo "🔖 Dernier tag      : ${tag} (sans 'v' = ${tag_nov})"
          echo "🧾 Première section : ${first_relevant_line}"
          echo "   → version extraite = ${first_version}"

          if [[ "$first_version" != "$tag_nov" ]]; then
            echo "::error file=CHANGELOG.md::❌ Incohérence: la première section du CHANGELOG (${first_version}) ne correspond pas au dernier tag (${tag_nov})."
            echo "💡 Mets la version récente en tête du fichier, ex. :"
            echo "   ## [${tag_nov}] - 2025-10-08"
            exit 1
          fi

          echo "✅ Cohérence stricte OK : la première section correspond au dernier tag."
